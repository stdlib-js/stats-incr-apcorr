{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar incrpcorr = require( '@stdlib/stats-incr-pcorr' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*\n* @example\n* var accumulator = incrapcorr( 2.0, -3.0 );\n*/\nfunction incrapcorr( meanx, meany ) {\n\tvar acc;\n\tvar N;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( '0dR4M', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( '0dR4N', meany ) );\n\t\t}\n\t\tacc = incrpcorr( meanx, meany );\n\t} else {\n\t\tacc = incrpcorr();\n\t}\n\tN = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation coefficient. If not provided input values, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn abs( acc() );\n\t\t}\n\t\tN += 1;\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrapcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample absolute Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats-incr-apcorr\n*\n* @example\n* var incrapcorr = require( '@stdlib/stats-incr-apcorr' );\n*\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*/\n\n// MODULES //\n\nvar incrapcorr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrapcorr;\n"],"names":["isNumber","require$$0","isPrimitive","incrpcorr","require$$1","abs","require$$2","format","require$$3","lib","meanx","meany","acc","N","arguments","length","TypeError","accumulator","x","y"],"mappings":";;2VAsBA,IAAIA,EAAWC,EAAsCC,YACjDC,EAAYC,EACZC,EAAMC,EACNC,EAASC,EAwEb,IC/CAC,EDOA,SAAqBC,EAAOC,GAC3B,IAAIC,EACAC,EACJ,GAAKC,UAAUC,OAAS,CACvB,IAAMf,EAAUU,GACf,MAAM,IAAIM,UAAWT,EAAQ,QAASG,IAEvC,IAAMV,EAAUW,GACf,MAAM,IAAIK,UAAWT,EAAQ,QAASI,IAEvCC,EAAMT,EAAWO,EAAOC,QAExBC,EAAMT,IAGP,OADAU,EAAI,EACGI,EAUP,SAASA,EAAaC,EAAGC,GACxB,OAA0B,IAArBL,UAAUC,OACH,IAANF,EACG,KAEDR,EAAKO,MAEbC,GAAK,EACER,EAAKO,EAAKM,EAAGC"}