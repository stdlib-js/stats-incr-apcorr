{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar incrpcorr = require( '@stdlib/stats-incr-pcorr' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*\n* @example\n* var accumulator = incrapcorr( 2.0, -3.0 );\n*/\nfunction incrapcorr( meanx, meany ) {\n\tvar acc;\n\tvar N;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tacc = incrpcorr( meanx, meany );\n\t} else {\n\t\tacc = incrpcorr();\n\t}\n\tN = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation coefficient. If not provided input values, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn abs( acc() );\n\t\t}\n\t\tN += 1;\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrapcorr;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample absolute Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats-incr-apcorr\n*\n* @example\n* var incrapcorr = require( '@stdlib/stats-incr-apcorr' );\n*\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,0BAA2B,EAChDC,EAAM,QAAS,+BAAgC,EAC/CC,EAAS,QAAS,uBAAwB,EAgC9C,SAASC,EAAYC,EAAOC,EAAQ,CACnC,IAAIC,EACAC,EACJ,GAAK,UAAU,OAAS,CACvB,GAAK,CAACR,EAAUK,CAAM,EACrB,MAAM,IAAI,UAAWF,EAAQ,kEAAmEE,CAAM,CAAE,EAEzG,GAAK,CAACL,EAAUM,CAAM,EACrB,MAAM,IAAI,UAAWH,EAAQ,mEAAoEG,CAAM,CAAE,EAE1GC,EAAMN,EAAWI,EAAOC,CAAM,CAC/B,MACCC,EAAMN,EAAU,EAEjB,OAAAO,EAAI,EACGC,EAUP,SAASA,EAAaC,EAAGC,EAAI,CAC5B,OAAK,UAAU,SAAW,EACpBH,IAAM,EACH,KAEDN,EAAKK,EAAI,CAAE,GAEnBC,GAAK,EACEN,EAAKK,EAAKG,EAAGC,CAAE,CAAE,EACzB,CACD,CAKAZ,EAAO,QAAUK,ICpDjB,IAAIQ,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isNumber", "incrpcorr", "abs", "format", "incrapcorr", "meanx", "meany", "acc", "N", "accumulator", "x", "y", "main"]
}
